{
  "address": "0x488B4203A4BCc2B4E0eCeB6A0A77207CcDf5A8a2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Quantity_zero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Wallet_error",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ActualFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "add",
          "type": "address"
        }
      ],
      "name": "CallQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "add",
          "type": "address"
        }
      ],
      "name": "CallStop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "StopLoss",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NewFeed",
          "type": "address"
        }
      ],
      "name": "ModifyFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_AddressFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe712d3326df8278e9f83b7be5730014501ab3e1339cbd2bfdedb3abb0070d7e3",
  "receipt": {
    "to": null,
    "from": "0xD6e0FFBf2d0029FFFeE7750496C69B584b4e2db7",
    "contractAddress": "0x488B4203A4BCc2B4E0eCeB6A0A77207CcDf5A8a2",
    "transactionIndex": 37,
    "gasUsed": "1059263",
    "logsBloom": "0x
    "blockHash": "0xd76ee29556cd964221ef99349febb3fb479da6d935ae48571c8caa467eccc9f7",
    "transactionHash": "0xe712d3326df8278e9f83b7be5730014501ab3e1339cbd2bfdedb3abb0070d7e3",
    "logs": [],
    "blockNumber": 11263942,
    "cumulativeGasUsed": "25123665",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "ca9f977334e0a2daf409aa14a8da2e24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Quantity_zero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Wallet_error\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ActualFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"CallQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"CallStop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StopLoss\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewFeed\",\"type\":\"address\"}],\"name\":\"ModifyFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_AddressFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketOrder.sol\":\"MarketOrder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/MarketOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n//import \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\"; // Keepers import\\nimport \\\"./TokenPrice.sol\\\";\\n\\nerror Quantity_zero();\\nerror Wallet_error();\\n\\ncontract MarketOrder{//} is KeeperCompatibleInterface {\\n    using TokenPrice for uint256; //library\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    struct Dades {\\n        uint256 Quantity;\\n        uint256 Stop;\\n    }\\n\\n    address payable [] private s_Wallets;\\n    mapping (address => Dades) s_Registre;\\n    address public immutable i_owner;\\n    address public s_AddressFeed;\\n\\n\\n\\n    constructor ( address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_AddressFeed = priceFeedAddress;\\n        priceFeed = AggregatorV3Interface(s_AddressFeed);//0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        \\n    }\\n\\n    modifier onlyOwner{\\n        require(msg.sender == i_owner);  \\n        _;     \\n    }\\n\\n    function Deposit(uint256 StopLoss ) public payable {//Deposita quantity i es registre  uint256 StopLoss \\n        \\n        //Pay subscription\\n        if (msg.value == 0){\\n            revert Quantity_zero();\\n        }\\n        //Add wallet to the s_Wallets\\n        s_Wallets.push(payable(msg.sender));\\n        //Start subscription time\\n        Dades storage dades = s_Registre[msg.sender];\\n        dades.Quantity += msg.value;\\n        dades.Stop = StopLoss;\\n    } \\n\\n    function Withdraw () public {\\n        //Bloqueja si la wallet no esta\\n        bool listed;\\n        uint256 num;\\n        address[] memory id = new address[](s_Wallets.length);\\n        for (uint i = 0; i < s_Wallets.length; i++){\\n            id[i] = s_Wallets[i];\\n            if (listed = (msg.sender == id[i])) {\\n                num = i;\\n                break;\\n            }\\n        }\\n        //require(listed, 'Wallet not listed');\\n        if (!listed){\\n            revert Wallet_error();\\n        }\\n        //Agafa la quanittat que te per fer el W\\n        Dades memory Quantity = s_Registre[msg.sender];\\n        uint256 Value = Quantity.Quantity;\\n        (bool Success, ) = msg.sender.call{value: Value}(\\\"\\\");\\n        require(Success);\\n        //Reseteja les dades\\n        Dades storage dades = s_Registre[msg.sender];\\n        dades.Quantity = 0;\\n        dades.Stop = 0;\\n        //Borrar wallet que ha fet W\\n        s_Wallets = Remove(num);\\n\\n    }\\n\\n    function Remove(uint num) internal returns(address payable [] memory) {// Borra la wallet del array borrant la posicio tmb\\n\\n        for (uint i = num; i < s_Wallets.length - 1; i++){\\n            s_Wallets[i] = s_Wallets[i+1];\\n        }\\n        delete s_Wallets[s_Wallets.length-1];\\n        s_Wallets.pop();\\n        return s_Wallets;\\n    }\\n\\n    function ModifyFeed(address NewFeed) external onlyOwner {\\n        s_AddressFeed = NewFeed;\\n        priceFeed = AggregatorV3Interface(s_AddressFeed);\\n    }\\n\\n    //function getEThPrice() \\n\\n\\n    // Public view functions\\n    function ActualFeed() public view returns(address) {\\n        return s_AddressFeed;\\n    }\\n    function CallQuantity(address add) public view returns (uint256){\\n        Dades memory data = s_Registre[add];\\n        return (data.Quantity);\\n    }\\n    function CallStop(address add) public view returns (uint256){\\n        Dades memory data = s_Registre[add];\\n        return (data.Stop);\\n    }\\n    function getMembers() public view returns (address[] memory){\\n      address[] memory id = new address[](s_Wallets.length);\\n      for (uint i = 0; i < s_Wallets.length; i++) {\\n          id[i] = s_Wallets[i];\\n      }\\n      return id;\\n    }\\n    function getBalance() public view returns (uint256){\\n        return (address(this).balance);\\n    }\\n}\",\"keccak256\":\"0x45357a7e2bbcd7ab70b6e62231a3075389b4b28866e078576b374605649ffe82\",\"license\":\"MIT\"},\"contracts/TokenPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\"; // PriceFeed contract imported from chainlink github\\n\\nlibrary TokenPrice {\\n    /**\\n     * Network: Rinkeby\\n     * Aggregator: ETH/USD\\n     * Address: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n     */\\n    function getLatestPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (\\n            /*uint80 roundID*/,\\n            int256 price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n        return uint256(price);// Retorna 8 decimals\\n    }\\n\\n    function ConversionToEth(uint256 DollaAmount, AggregatorV3Interface priceFeed) internal view returns(uint256) {\\n        uint256 Price = getLatestPrice(priceFeed);\\n        uint256 EthAmount = (DollaAmount * 100000000000)/Price;\\n        return EthAmount;\\n    }\\n}\",\"keccak256\":\"0x096b87b4a252eea0bf423484a81d7c1c5993d30e0db38647031ea88ef359aaaf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200132c3803806200132c833981810160405281019062000037919062000182565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001b4565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014a826200011d565b9050919050565b6200015c816200013d565b81146200016857600080fd5b50565b6000815190506200017c8162000151565b92915050565b6000602082840312156200019b576200019a62000118565b5b6000620001ab848285016200016b565b91505092915050565b60805160601c611152620001da600039600081816106ab015261096e01526111526000f3fe60806040526004361061009c5760003560e01c8063741bef1a11610064578063741bef1a146101535780639eab52531461017e578063b13d7eab146101a9578063c44ac404146101e6578063dba6335f14610211578063e854fd2d1461023c5761009c565b806312065fe0146100a157806340121ce4146100cc5780634d6ce1e5146100f757806357ea89b61461011357806360b7db061461012a575b600080fd5b3480156100ad57600080fd5b506100b6610279565b6040516100c39190610cbf565b60405180910390f35b3480156100d857600080fd5b506100e1610281565b6040516100ee9190610d1b565b60405180910390f35b610111600480360381019061010c9190610d67565b6102ab565b005b34801561011f57600080fd5b506101286103b4565b005b34801561013657600080fd5b50610151600480360381019061014c9190610dc0565b6106a9565b005b34801561015f57600080fd5b506101686107a7565b6040516101759190610e4c565b60405180910390f35b34801561018a57600080fd5b506101936107cb565b6040516101a09190610f25565b60405180910390f35b3480156101b557600080fd5b506101d060048036038101906101cb9190610dc0565b6108d6565b6040516101dd9190610cbf565b60405180910390f35b3480156101f257600080fd5b506101fb610946565b6040516102089190610d1b565b60405180910390f35b34801561021d57600080fd5b5061022661096c565b6040516102339190610d1b565b60405180910390f35b34801561024857600080fd5b50610263600480360381019061025e9190610dc0565b610990565b6040516102709190610cbf565b60405180910390f35b600047905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60003414156102e6576040517f28e9332e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050348160000160008282546103a09190610f76565b925050819055508181600101819055505050565b600080600060018054905067ffffffffffffffff8111156103d8576103d7610fcc565b5b6040519080825280602002602001820160405280156104065781602001602082028036833780820191505090505b50905060005b600180549050811015610511576001818154811061042d5761042c610ffb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061046b5761046a610ffb565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181815181106104b8576104b7610ffb565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614935083156104fe57809250610511565b80806105099061102a565b91505061040c565b5082610549576040517f8ac43dab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060008160000151905060003373ffffffffffffffffffffffffffffffffffffffff16826040516105da906110a4565b60006040518083038185875af1925050503d8060008114610617576040519150601f19603f3d011682016040523d82523d6000602084013e61061c565b606091505b505090508061062a57600080fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001819055506000816001018190555061068a86610a00565b6001908051906020019061069f929190610bff565b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070157600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060018054905067ffffffffffffffff8111156107ee576107ed610fcc565b5b60405190808252806020026020018201604052801561081c5781602001602082028036833780820191505090505b50905060005b6001805490508110156108ce576001818154811061084357610842610ffb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061088157610880610ffb565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806108c69061102a565b915050610822565b508091505090565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090508060200151915050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090508060000151915050919050565b606060008290505b60018080549050610a1991906110b9565b811015610ad95760018082610a2e9190610f76565b81548110610a3f57610a3e610ffb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660018281548110610a7e57610a7d610ffb565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610ad19061102a565b915050610a08565b506001808080549050610aec91906110b9565b81548110610afd57610afc610ffb565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001805480610b3c57610b3b6110ed565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556001805480602002602001604051908101604052809291908181526020018280548015610bf357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ba9575b50505050509050919050565b828054828255906000526020600020908101928215610c78579160200282015b82811115610c775782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c1f565b5b509050610c859190610c89565b5090565b5b80821115610ca2576000816000905550600101610c8a565b5090565b6000819050919050565b610cb981610ca6565b82525050565b6000602082019050610cd46000830184610cb0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d0582610cda565b9050919050565b610d1581610cfa565b82525050565b6000602082019050610d306000830184610d0c565b92915050565b600080fd5b610d4481610ca6565b8114610d4f57600080fd5b50565b600081359050610d6181610d3b565b92915050565b600060208284031215610d7d57610d7c610d36565b5b6000610d8b84828501610d52565b91505092915050565b610d9d81610cfa565b8114610da857600080fd5b50565b600081359050610dba81610d94565b92915050565b600060208284031215610dd657610dd5610d36565b5b6000610de484828501610dab565b91505092915050565b6000819050919050565b6000610e12610e0d610e0884610cda565b610ded565b610cda565b9050919050565b6000610e2482610df7565b9050919050565b6000610e3682610e19565b9050919050565b610e4681610e2b565b82525050565b6000602082019050610e616000830184610e3d565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610e9c81610cfa565b82525050565b6000610eae8383610e93565b60208301905092915050565b6000602082019050919050565b6000610ed282610e67565b610edc8185610e72565b9350610ee783610e83565b8060005b83811015610f18578151610eff8882610ea2565b9750610f0a83610eba565b925050600181019050610eeb565b5085935050505092915050565b60006020820190508181036000830152610f3f8184610ec7565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f8182610ca6565b9150610f8c83610ca6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fc157610fc0610f47565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061103582610ca6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561106857611067610f47565b5b600182019050919050565b600081905092915050565b50565b600061108e600083611073565b91506110998261107e565b600082019050919050565b60006110af82611081565b9150819050919050565b60006110c482610ca6565b91506110cf83610ca6565b9250828210156110e2576110e1610f47565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212209d4be5d840d08ca19d3c42cf900f3a296d21075821d9816b03ac47625edddda664736f6c63430008080033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/MarketOrder.sol:MarketOrder",
        "label": "priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 67,
        "contract": "contracts/MarketOrder.sol:MarketOrder",
        "label": "s_Wallets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/MarketOrder.sol:MarketOrder",
        "label": "s_Registre",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Dades)64_storage)"
      },
      {
        "astId": 76,
        "contract": "contracts/MarketOrder.sol:MarketOrder",
        "label": "s_AddressFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Dades)64_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MarketOrder.Dades)",
        "numberOfBytes": "32",
        "value": "t_struct(Dades)64_storage"
      },
      "t_struct(Dades)64_storage": {
        "encoding": "inplace",
        "label": "struct MarketOrder.Dades",
        "members": [
          {
            "astId": 61,
            "contract": "contracts/MarketOrder.sol:MarketOrder",
            "label": "Quantity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 63,
            "contract": "contracts/MarketOrder.sol:MarketOrder",
            "label": "Stop",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}