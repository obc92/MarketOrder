{
  "language": "Solidity",
  "sources": {
    "contracts/MarketOrder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\"; // Keepers import\nimport \"./TokenPrice.sol\";\n\nerror Quantity_zero();\nerror Wallet_error();\nerror Order__UpkeepNotNeeded(uint256 currentBalance, uint256 PlayersNum);\n\ncontract MarketOrder is KeeperCompatibleInterface {\n    using TokenPrice for uint256; //library\n\n    AggregatorV3Interface public priceFeed;\n\n    struct Dades {\n        uint256 Quantity;\n        uint256 Stop;\n    }\n\n    address payable [] private s_Wallets;\n    mapping (address => Dades) s_Registre;\n    address public immutable i_owner;\n    address public s_AddressFeed;\n\n\n\n    constructor ( address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_AddressFeed = priceFeedAddress;\n        priceFeed = AggregatorV3Interface(s_AddressFeed);//0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n        \n    }\n\n    modifier onlyOwner{\n        require(msg.sender == i_owner);  \n        _;     \n    }\n\n    function Deposit(uint256 StopLoss) public payable {//Deposita quantity i es registre  uint256 StopLoss  //uint256 StopLoss\n        \n        //Pay subscription\n        if (msg.value == 0){\n            revert Quantity_zero();\n        }\n        //Add wallet to the s_Wallets\n        s_Wallets.push(payable(msg.sender));\n        //Registre dades\n        Dades storage dades = s_Registre[msg.sender];\n        dades.Quantity += msg.value;\n        dades.Stop = StopLoss;\n    } \n\n    function SetStop(uint256 StopLoss) public {\n        Dades storage dades = s_Registre[msg.sender];\n        dades.Stop = StopLoss;\n    }\n\n    function Withdraw () public {\n        //Bloqueja si la wallet no esta\n        bool listed;\n        uint256 num;\n        address[] memory id = new address[](s_Wallets.length);\n        for (uint i = 0; i < s_Wallets.length; i++){\n            id[i] = s_Wallets[i];\n            if (listed = (msg.sender == id[i])) {\n                num = i;\n                break;\n            }\n        }\n        //require(listed, 'Wallet not listed');\n        if (!listed){\n            revert Wallet_error();\n        }\n        //Agafa la quanittat que te per fer el W\n        Dades memory Quantity = s_Registre[msg.sender];\n        uint256 Value = Quantity.Quantity;\n        (bool Success, ) = msg.sender.call{value: Value}(\"\");\n        require(Success);\n        //Reseteja les dades\n        Dades storage dades = s_Registre[msg.sender];\n        dades.Quantity = 0;\n        dades.Stop = 0;\n        //Borrar wallet que ha fet W\n        s_Wallets = Remove(num);\n\n    }\n\n    function Remove(uint num) internal returns(address payable [] memory) {// Borra la wallet del array borrant la posicio tmb\n\n        for (uint i = num; i < s_Wallets.length - 1; i++){\n            s_Wallets[i] = s_Wallets[i+1];\n        }\n        delete s_Wallets[s_Wallets.length-1];\n        s_Wallets.pop();\n        return s_Wallets;\n    }\n\n    function ModifyFeed(address NewFeed) external onlyOwner {\n        s_AddressFeed = NewFeed;\n        priceFeed = AggregatorV3Interface(s_AddressFeed);\n    }\n\n    //priceFeed\n    function getPrice() internal view returns(uint256) { //Function where I call the conversion\n       \n        uint256 EthPrice = TokenPrice.dolarValue(priceFeed);\n        return EthPrice;\n    }\n\n    //Keepers\n    function checkUpkeep(bytes memory /* checkData */) public view override returns (//,bytes memory value\n        bool upkeepNeeded, \n        bytes memory num\n        ){\n        \n        bool sellTime; \n        bool Quant;\n        uint256 EthPrice;\n\n        EthPrice = getPrice();\n\n        address[] memory id = new address[](s_Wallets.length);\n\n        for (uint i = 0; i < s_Wallets.length; i++) {           //Search in loop which Stop should be triggered\n          id[i] = s_Wallets[i];\n          Dades memory Data = s_Registre[id[i]];\n          uint256 SL = Data.Stop;\n          uint256 Q = Data.Quantity;\n          sellTime = (SL <= EthPrice); \n          Quant = (Q > 0);\n          if (sellTime && Quant){\n            num = abi.encodePacked(i);\n            //value = abi.encodePacked(Q);\n          }\n          upkeepNeeded = (sellTime && Quant); //All conditions must be True\n        }  \n        return (upkeepNeeded, num);//, value\n    }\n\n    function performUpkeep(bytes calldata num) external override {//, bytes calldata value\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        // require(upkeepNeeded, \"Upkeep not needed\");\n        if (!upkeepNeeded) {\n            revert Order__UpkeepNotNeeded(\n                address(this).balance,\n                s_Wallets.length\n            );\n        }\n        //Byte conversion to uint\n        uint256 number;\n        for(uint i=0;i<num.length;i++){\n            number = number + uint(uint8(num[i]))*(2**(8*(num.length-(i+1))));\n        }\n        // uint256 Val;\n        // for(uint i=0;i<value.length;i++){\n        //     Val = Val + uint(uint8(value[i]))*(2**(8*(value.length-(i+1))));\n        // }\n        \n        //Sell Val in UniswapV3\n        // ··············\n        // ··············\n\n        // Reset data from wallet number\n        // Reseteja les dades\n        Dades storage dades = s_Registre[s_Wallets[number]];\n        dades.Quantity = 0;\n        dades.Stop = 0;\n        //Delets wallet from the list\n        s_Wallets = Remove(number);\n    }\n\n\n    // Public view functions\n    function ActualFeed() public view returns(address) {\n        return s_AddressFeed;\n    }\n    function CallQuantity(address add) public view returns (uint256){\n        Dades memory data = s_Registre[add];\n        return (data.Quantity);\n    }\n    function CallStop(address add) public view returns (uint256){\n        Dades memory data = s_Registre[add];\n        return (data.Stop);\n    }\n    function getMembers() public view returns (address[] memory){\n      address[] memory id = new address[](s_Wallets.length);\n      for (uint i = 0; i < s_Wallets.length; i++) {\n          id[i] = s_Wallets[i];\n      }\n      return id;\n    }\n    function getBalance() public view returns (uint256){\n        return (address(this).balance);\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/TokenPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\"; // PriceFeed contract imported from chainlink github\n\nlibrary TokenPrice {\n    /**\n     * Network: Rinkeby\n     * Aggregator: ETH/USD\n     * Address: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n     */\n    function getLatestPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        (\n            /*uint80 roundID*/,\n            int256 price,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        return uint256(price);// Retorna 8 decimals\n    }\n\n    function dolarValue(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        uint256 Price = getLatestPrice(priceFeed);\n        uint256 EthAmount = Price/100000000;\n        return EthAmount;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}